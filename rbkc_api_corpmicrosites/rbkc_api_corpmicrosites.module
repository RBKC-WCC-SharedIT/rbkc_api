<?php

/**
 * Implementation of hook_needs_review_callback_alter
 */
function rbkc_api_corpmicrosites_needs_review_callback_alter(&$callback_name) {
  $callback_name = 'rbkc_api_corpmicrosites_needs_review_count';
}


function rbkc_api_corpmicrosites_needs_review_count($sitename) {
  $paths_ids = array_flip(_rbkc_api_corpmicrosites_path_ids(array($sitename)));
  
  if (!isset($paths_ids[$sitename])) {
    return t('Error. Unknown site path "'.$sitename.'"');
  }
  $domain_id = $paths_ids[$sitename];
  
  $query = db_select('workbench_moderation_node_history', 'wmnh')
    ->fields('wmnh');
  $query->join('node_access', 'na', 'na.nid = wmnh.nid'); // node access maps node to domain
  $query->condition('wmnh.state', "needs_review"); // only want 'needs_review' status
  $query->condition('wmnh.current', 1);  // where needs_review is the CURRENT status (table stores history)
  $query->condition('na.gid', $domain_id); // only want pages fo current domain
  $results = $query->execute();
  
  return $results->rowCount(); // return the number of rows found
}


/**
 * Implementation of hook_rbkc_api_user_post_create()
 */
function rbkc_api_corpmicrosites_rbkc_api_user_post_create($user, $queue_item, $usermode) {
  // If the REST request did not provide a domain name, stop processing
  if (!isset($queue_item['request_data']['domains'])) {
    return;
  }
  
  $requested_domains = _rbkc_api_corpmicrosites_domain_paths2ids($queue_item['request_data']['domains']);
  
  // If the domain in the REST request doesn't exist in this site, stop
  if (empty($requested_domains)) {
    return;
  }
  
  $domain_ids = array_keys($requested_domains);
  if (isset($user->domain_user)) {
    $domain_ids += $user->domain_user;
  }
  
  // Allow user to access domains, managed by Domain Access module.
  $grant_domain_ids = array('domain_user' => array_combine($domain_ids, $domain_ids));
  domain_user_save($grant_domain_ids, $user, '');
  
  // If this is a new user, also specify finer grained role-based access
  // to the domains, managed by Subfolder Domains.
  if ($usermode == RBKC_API_NEW_USER) {
    rbkc_api_microsites_subfolder_perms($user, $domain_ids);
  }
}



/**
 * Grant user's roles to domains
 * @param object $user The user object for the user to grant access to
 * @param array $domain_ids Array of Domain IDs to grant access for
 */
function rbkc_api_microsites_subfolder_perms($user, $domain_ids) {
  if (isset($user->domain_user)) {
    $domain_ids += $user->domain_user;
  }
  
  /**
   * Grant subfolder domain permissions. We're doing this by calling the
   * form submit handler for subfolders_domain_roles_form()
   */
  
  // For each role assigned to this user, let the user have that
  // role in all of her domains. We initialise this array
  // with the user's user_id because the form
  // submit handler needs this uid.
  $form_values_roles_domains = array(0 => array('all' => $user->uid));
  foreach ($user->roles as $rid => $role_name) {
    $form_values_roles_domains[$rid] = array('all' => 1);
  }
  
  // Format the form_state array to pass to the form submit handler
  $form_values = array('values' => array(
    'subfolders_domain_role' => $form_values_roles_domains,
  ));
  
  $form_values['values']['op'] = 'Save configuration';
  
  // Call subfolders_roles admin form submit handler
  module_load_include('inc', 'subfolders_domain', 'subfolders_domain.admin');
  subfolders_domain_roles_form_submit(array(), $form_values);

// For ref, form values should be like the following example
//  $form_values = array(
//    'values' => array(
//      'subfolders_domain_role' => array(
//        0 => array(
//          'all' => $user->uid,  // the form submit handler needs this uid
//        ),
//        5 => array(  // 5 is the rid
//          'all' => 1,   // Assign this role to all domains granted to user
//        )
//      )
//    )
//  );
}



/**
 * Checks to see if $domain_paths exist on this site.
 * For each path that does exist, its domain ID is returned.
 * @param  array $domain_paths The paths to check.
 * @return mixed Domain ID, or FALSE.
 */
function _rbkc_api_corpmicrosites_path_ids($requested_domain_paths) {
	$all_domain_paths = rbkc_api_corpmicrosites_get_all_domains();
	$requested_ids_paths = array();
	foreach ($all_domain_paths as $domain_id => $domain_path) {
		if (in_array($domain_path, $requested_domain_paths)) {
			$requested_ids_paths[$domain_id] = $domain_path;
		}
	}
	return $requested_ids_paths;
}

/**
 * Returns a list of all domain subfolder names on this site
 * @return array List of domain IDs
 */
function rbkc_api_corpmicrosites_get_all_domains() {
	$domains = domain_domains();
	$ids_paths = array();
	foreach ($domains as $domain_id => $domain_data) {
		list($domain_name, $microsite_path) = explode('/', $domain_data['subdomain']);
		if ($microsite_path) {
			$ids_paths[$domain_id] = $microsite_path;			
		}
	}
	return $ids_paths;
}


function _rbkc_api_corpmicrosites_domain_paths2ids($domain_paths) {
  static $domains = array();
  
  if (empty($domains)) {
    $domains_paths = db_select('subfolders_domain_sites', 'd')->fields('d')->execute();
    if (!empty($domains_paths)) {
      foreach ($domains_paths as $domain_path) {
        $domains[$domain_path->domain_id] = $domain_path->site;
      }
    }
  }
  
  $result = array();
  foreach ($domains as $domain_id => $domain_path) {
    if (in_array($domain_path, $domain_paths)) {
      $result[$domain_id] = $domain_path;
    }
  }
  
  return $result;
}